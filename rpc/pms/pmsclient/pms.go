// Code generated by goctl. DO NOT EDIT.
// Source: pms.proto

package pmsclient

import (
	"context"

	"simple_mall_new/rpc/pms/pms"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CategoryDeleteReq        = pms.CategoryDeleteReq
	CategoryDeleteResp       = pms.CategoryDeleteResp
	CategoryListData         = pms.CategoryListData
	CategoryListReq          = pms.CategoryListReq
	CategoryListResp         = pms.CategoryListResp
	MerchantApplysListData   = pms.MerchantApplysListData
	MerchantsApplyAddReq     = pms.MerchantsApplyAddReq
	MerchantsApplyAddResp    = pms.MerchantsApplyAddResp
	MerchantsApplyDeleteReq  = pms.MerchantsApplyDeleteReq
	MerchantsApplyDeleteResp = pms.MerchantsApplyDeleteResp
	MerchantsApplyListReq    = pms.MerchantsApplyListReq
	MerchantsApplyListResp   = pms.MerchantsApplyListResp
	MerchantsApplyUpdateReq  = pms.MerchantsApplyUpdateReq
	MerchantsApplyUpdateResp = pms.MerchantsApplyUpdateResp
	MerchantsDeleteReq       = pms.MerchantsDeleteReq
	MerchantsDeleteResp      = pms.MerchantsDeleteResp
	MerchantsInfoReq         = pms.MerchantsInfoReq
	MerchantsInfoResp        = pms.MerchantsInfoResp
	MerchantsListData        = pms.MerchantsListData
	MerchantsListReq         = pms.MerchantsListReq
	MerchantsListResp        = pms.MerchantsListResp
	MerchantsUpdateReq       = pms.MerchantsUpdateReq
	MerchantsUpdateResp      = pms.MerchantsUpdateResp
	PlaceDeleteReq           = pms.PlaceDeleteReq
	PlaceDeleteResp          = pms.PlaceDeleteResp
	PlaceInfoReq             = pms.PlaceInfoReq
	PlaceInfoResp            = pms.PlaceInfoResp
	PlaceListData            = pms.PlaceListData
	PlaceListReq             = pms.PlaceListReq
	PlaceListResp            = pms.PlaceListResp
	PlaceUpdateReq           = pms.PlaceUpdateReq
	PlaceUpdateResp          = pms.PlaceUpdateResp
	ProductDeleteReq         = pms.ProductDeleteReq
	ProductDeleteResp        = pms.ProductDeleteResp
	ProductInfoReq           = pms.ProductInfoReq
	ProductInfoResp          = pms.ProductInfoResp
	ProductListData          = pms.ProductListData
	ProductListReq           = pms.ProductListReq
	ProductListResp          = pms.ProductListResp
	SaveOrUpdateCategoryReq  = pms.SaveOrUpdateCategoryReq
	SaveOrUpdateCategoryResp = pms.SaveOrUpdateCategoryResp
	SaveOrUpdateProductReq   = pms.SaveOrUpdateProductReq
	SaveOrUpdateProductResp  = pms.SaveOrUpdateProductResp
	Size                     = pms.Size
	SkuListData              = pms.SkuListData
	SkuListReq               = pms.SkuListReq
	SkuListResp              = pms.SkuListResp
	SkuUpdateReq             = pms.SkuUpdateReq
	SkuUpdateResp            = pms.SkuUpdateResp
	UserInfoFF               = pms.UserInfoFF

	Pms interface {
		// 添加||更新分类
		SaveOrUpdateCategory(ctx context.Context, in *SaveOrUpdateCategoryReq, opts ...grpc.CallOption) (*SaveOrUpdateCategoryResp, error)
		// 分类列表
		CategoryList(ctx context.Context, in *CategoryListReq, opts ...grpc.CallOption) (*CategoryListResp, error)
		// 删除分类
		CategoryDelete(ctx context.Context, in *CategoryDeleteReq, opts ...grpc.CallOption) (*CategoryDeleteResp, error)
		// 入驻申请
		MerchantsApplyAdd(ctx context.Context, in *MerchantsApplyAddReq, opts ...grpc.CallOption) (*MerchantsApplyAddResp, error)
		// 入驻申请列表
		MerchantsApplyList(ctx context.Context, in *MerchantsApplyListReq, opts ...grpc.CallOption) (*MerchantsApplyListResp, error)
		// 审核入驻申请
		MerchantsApplyUpdate(ctx context.Context, in *MerchantsApplyUpdateReq, opts ...grpc.CallOption) (*MerchantsApplyUpdateResp, error)
		// 删除入驻申请
		MerchantsApplyDelete(ctx context.Context, in *MerchantsApplyDeleteReq, opts ...grpc.CallOption) (*MerchantsApplyDeleteResp, error)
		// 商家列表
		MerchantsList(ctx context.Context, in *MerchantsListReq, opts ...grpc.CallOption) (*MerchantsListResp, error)
		// 更新商家
		MerchantsUpdate(ctx context.Context, in *MerchantsUpdateReq, opts ...grpc.CallOption) (*MerchantsUpdateResp, error)
		// 删除商家
		MerchantsDelete(ctx context.Context, in *MerchantsDeleteReq, opts ...grpc.CallOption) (*MerchantsDeleteResp, error)
		// 商家详情
		MerchantsInfo(ctx context.Context, in *MerchantsInfoReq, opts ...grpc.CallOption) (*MerchantsInfoResp, error)
		// 自提点列表
		PlaceList(ctx context.Context, in *PlaceListReq, opts ...grpc.CallOption) (*PlaceListResp, error)
		// 更新自提点
		PlaceUpdate(ctx context.Context, in *PlaceUpdateReq, opts ...grpc.CallOption) (*PlaceUpdateResp, error)
		// 删除自提点
		PlaceDelete(ctx context.Context, in *PlaceDeleteReq, opts ...grpc.CallOption) (*PlaceDeleteResp, error)
		// 自提点详情
		PlaceInfo(ctx context.Context, in *PlaceInfoReq, opts ...grpc.CallOption) (*PlaceInfoResp, error)
		// 添加||更新商品
		SaveOrUpdateProduct(ctx context.Context, in *SaveOrUpdateProductReq, opts ...grpc.CallOption) (*SaveOrUpdateProductResp, error)
		// 商品列表
		ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error)
		// 删除商品
		ProductDelete(ctx context.Context, in *ProductDeleteReq, opts ...grpc.CallOption) (*ProductDeleteResp, error)
		// 查询商品详情
		ProductInfo(ctx context.Context, in *ProductInfoReq, opts ...grpc.CallOption) (*ProductInfoResp, error)
		// Sku列表
		SkuList(ctx context.Context, in *SkuListReq, opts ...grpc.CallOption) (*SkuListResp, error)
		// 更新Sku
		SkuUpdate(ctx context.Context, in *SkuUpdateReq, opts ...grpc.CallOption) (*SkuUpdateResp, error)
	}

	defaultPms struct {
		cli zrpc.Client
	}
)

func NewPms(cli zrpc.Client) Pms {
	return &defaultPms{
		cli: cli,
	}
}

// 添加||更新分类
func (m *defaultPms) SaveOrUpdateCategory(ctx context.Context, in *SaveOrUpdateCategoryReq, opts ...grpc.CallOption) (*SaveOrUpdateCategoryResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.SaveOrUpdateCategory(ctx, in, opts...)
}

// 分类列表
func (m *defaultPms) CategoryList(ctx context.Context, in *CategoryListReq, opts ...grpc.CallOption) (*CategoryListResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.CategoryList(ctx, in, opts...)
}

// 删除分类
func (m *defaultPms) CategoryDelete(ctx context.Context, in *CategoryDeleteReq, opts ...grpc.CallOption) (*CategoryDeleteResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.CategoryDelete(ctx, in, opts...)
}

// 入驻申请
func (m *defaultPms) MerchantsApplyAdd(ctx context.Context, in *MerchantsApplyAddReq, opts ...grpc.CallOption) (*MerchantsApplyAddResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.MerchantsApplyAdd(ctx, in, opts...)
}

// 入驻申请列表
func (m *defaultPms) MerchantsApplyList(ctx context.Context, in *MerchantsApplyListReq, opts ...grpc.CallOption) (*MerchantsApplyListResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.MerchantsApplyList(ctx, in, opts...)
}

// 审核入驻申请
func (m *defaultPms) MerchantsApplyUpdate(ctx context.Context, in *MerchantsApplyUpdateReq, opts ...grpc.CallOption) (*MerchantsApplyUpdateResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.MerchantsApplyUpdate(ctx, in, opts...)
}

// 删除入驻申请
func (m *defaultPms) MerchantsApplyDelete(ctx context.Context, in *MerchantsApplyDeleteReq, opts ...grpc.CallOption) (*MerchantsApplyDeleteResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.MerchantsApplyDelete(ctx, in, opts...)
}

// 商家列表
func (m *defaultPms) MerchantsList(ctx context.Context, in *MerchantsListReq, opts ...grpc.CallOption) (*MerchantsListResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.MerchantsList(ctx, in, opts...)
}

// 更新商家
func (m *defaultPms) MerchantsUpdate(ctx context.Context, in *MerchantsUpdateReq, opts ...grpc.CallOption) (*MerchantsUpdateResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.MerchantsUpdate(ctx, in, opts...)
}

// 删除商家
func (m *defaultPms) MerchantsDelete(ctx context.Context, in *MerchantsDeleteReq, opts ...grpc.CallOption) (*MerchantsDeleteResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.MerchantsDelete(ctx, in, opts...)
}

// 商家详情
func (m *defaultPms) MerchantsInfo(ctx context.Context, in *MerchantsInfoReq, opts ...grpc.CallOption) (*MerchantsInfoResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.MerchantsInfo(ctx, in, opts...)
}

// 自提点列表
func (m *defaultPms) PlaceList(ctx context.Context, in *PlaceListReq, opts ...grpc.CallOption) (*PlaceListResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.PlaceList(ctx, in, opts...)
}

// 更新自提点
func (m *defaultPms) PlaceUpdate(ctx context.Context, in *PlaceUpdateReq, opts ...grpc.CallOption) (*PlaceUpdateResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.PlaceUpdate(ctx, in, opts...)
}

// 删除自提点
func (m *defaultPms) PlaceDelete(ctx context.Context, in *PlaceDeleteReq, opts ...grpc.CallOption) (*PlaceDeleteResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.PlaceDelete(ctx, in, opts...)
}

// 自提点详情
func (m *defaultPms) PlaceInfo(ctx context.Context, in *PlaceInfoReq, opts ...grpc.CallOption) (*PlaceInfoResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.PlaceInfo(ctx, in, opts...)
}

// 添加||更新商品
func (m *defaultPms) SaveOrUpdateProduct(ctx context.Context, in *SaveOrUpdateProductReq, opts ...grpc.CallOption) (*SaveOrUpdateProductResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.SaveOrUpdateProduct(ctx, in, opts...)
}

// 商品列表
func (m *defaultPms) ProductList(ctx context.Context, in *ProductListReq, opts ...grpc.CallOption) (*ProductListResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.ProductList(ctx, in, opts...)
}

// 删除商品
func (m *defaultPms) ProductDelete(ctx context.Context, in *ProductDeleteReq, opts ...grpc.CallOption) (*ProductDeleteResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.ProductDelete(ctx, in, opts...)
}

// 查询商品详情
func (m *defaultPms) ProductInfo(ctx context.Context, in *ProductInfoReq, opts ...grpc.CallOption) (*ProductInfoResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.ProductInfo(ctx, in, opts...)
}

// Sku列表
func (m *defaultPms) SkuList(ctx context.Context, in *SkuListReq, opts ...grpc.CallOption) (*SkuListResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.SkuList(ctx, in, opts...)
}

// 更新Sku
func (m *defaultPms) SkuUpdate(ctx context.Context, in *SkuUpdateReq, opts ...grpc.CallOption) (*SkuUpdateResp, error) {
	client := pms.NewPmsClient(m.cli.Conn())
	return client.SkuUpdate(ctx, in, opts...)
}
