// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: sys.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Sys_UserLogin_FullMethodName          = "/sys.Sys/UserLogin"
	Sys_SaveOrUpdateRole_FullMethodName   = "/sys.Sys/SaveOrUpdateRole"
	Sys_RoleDelete_FullMethodName         = "/sys.Sys/RoleDelete"
	Sys_RoleList_FullMethodName           = "/sys.Sys/RoleList"
	Sys_SaveOrUpdateMenu_FullMethodName   = "/sys.Sys/SaveOrUpdateMenu"
	Sys_MenuList_FullMethodName           = "/sys.Sys/MenuList"
	Sys_MenuDelete_FullMethodName         = "/sys.Sys/MenuDelete"
	Sys_LoginLogList_FullMethodName       = "/sys.Sys/LoginLogList"
	Sys_LoginLogDelete_FullMethodName     = "/sys.Sys/LoginLogDelete"
	Sys_OperationLogAdd_FullMethodName    = "/sys.Sys/OperationLogAdd"
	Sys_OperationLogList_FullMethodName   = "/sys.Sys/OperationLogList"
	Sys_OperationLogDelete_FullMethodName = "/sys.Sys/OperationLogDelete"
)

// SysClient is the client API for Sys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysClient interface {
	// UserLogin 用户登录
	UserLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// SaveOrUpdateRole 添加｜｜更新角色
	SaveOrUpdateRole(ctx context.Context, in *SaveOrUpdateRoleReq, opts ...grpc.CallOption) (*SaveOrUpdateRoleResp, error)
	// RoleDelete 删除角色
	RoleDelete(ctx context.Context, in *RoleDeleteReq, opts ...grpc.CallOption) (*RoleDeleteResp, error)
	// RoleList 角色列表
	RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error)
	// SaveOrUpdateMenu 添加｜｜更新菜单
	SaveOrUpdateMenu(ctx context.Context, in *SaveOrUpdateMenuReq, opts ...grpc.CallOption) (*SaveOrUpdateMenuResp, error)
	// MenuList 菜单列表
	MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListResp, error)
	// MenuDelete 删除菜单
	MenuDelete(ctx context.Context, in *MenuDeleteReq, opts ...grpc.CallOption) (*MenuDeleteResp, error)
	// LoginLogList 登录日志列表
	LoginLogList(ctx context.Context, in *LoginLogListReq, opts ...grpc.CallOption) (*LoginLogListResp, error)
	// LoginLogDelete 删除登录日志
	LoginLogDelete(ctx context.Context, in *LoginLogDeleteReq, opts ...grpc.CallOption) (*LoginLogDeleteResp, error)
	// 添加日志
	OperationLogAdd(ctx context.Context, in *OperationLogAddReq, opts ...grpc.CallOption) (*OperationLogAddResp, error)
	// 日志列表
	OperationLogList(ctx context.Context, in *OperationLogListReq, opts ...grpc.CallOption) (*OperationLogListResp, error)
	// 删除日志
	OperationLogDelete(ctx context.Context, in *OperationLogDeleteReq, opts ...grpc.CallOption) (*OperationLogDeleteResp, error)
}

type sysClient struct {
	cc grpc.ClientConnInterface
}

func NewSysClient(cc grpc.ClientConnInterface) SysClient {
	return &sysClient{cc}
}

func (c *sysClient) UserLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Sys_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SaveOrUpdateRole(ctx context.Context, in *SaveOrUpdateRoleReq, opts ...grpc.CallOption) (*SaveOrUpdateRoleResp, error) {
	out := new(SaveOrUpdateRoleResp)
	err := c.cc.Invoke(ctx, Sys_SaveOrUpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleDelete(ctx context.Context, in *RoleDeleteReq, opts ...grpc.CallOption) (*RoleDeleteResp, error) {
	out := new(RoleDeleteResp)
	err := c.cc.Invoke(ctx, Sys_RoleDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) RoleList(ctx context.Context, in *RoleListReq, opts ...grpc.CallOption) (*RoleListResp, error) {
	out := new(RoleListResp)
	err := c.cc.Invoke(ctx, Sys_RoleList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) SaveOrUpdateMenu(ctx context.Context, in *SaveOrUpdateMenuReq, opts ...grpc.CallOption) (*SaveOrUpdateMenuResp, error) {
	out := new(SaveOrUpdateMenuResp)
	err := c.cc.Invoke(ctx, Sys_SaveOrUpdateMenu_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuList(ctx context.Context, in *MenuListReq, opts ...grpc.CallOption) (*MenuListResp, error) {
	out := new(MenuListResp)
	err := c.cc.Invoke(ctx, Sys_MenuList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) MenuDelete(ctx context.Context, in *MenuDeleteReq, opts ...grpc.CallOption) (*MenuDeleteResp, error) {
	out := new(MenuDeleteResp)
	err := c.cc.Invoke(ctx, Sys_MenuDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) LoginLogList(ctx context.Context, in *LoginLogListReq, opts ...grpc.CallOption) (*LoginLogListResp, error) {
	out := new(LoginLogListResp)
	err := c.cc.Invoke(ctx, Sys_LoginLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) LoginLogDelete(ctx context.Context, in *LoginLogDeleteReq, opts ...grpc.CallOption) (*LoginLogDeleteResp, error) {
	out := new(LoginLogDeleteResp)
	err := c.cc.Invoke(ctx, Sys_LoginLogDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) OperationLogAdd(ctx context.Context, in *OperationLogAddReq, opts ...grpc.CallOption) (*OperationLogAddResp, error) {
	out := new(OperationLogAddResp)
	err := c.cc.Invoke(ctx, Sys_OperationLogAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) OperationLogList(ctx context.Context, in *OperationLogListReq, opts ...grpc.CallOption) (*OperationLogListResp, error) {
	out := new(OperationLogListResp)
	err := c.cc.Invoke(ctx, Sys_OperationLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) OperationLogDelete(ctx context.Context, in *OperationLogDeleteReq, opts ...grpc.CallOption) (*OperationLogDeleteResp, error) {
	out := new(OperationLogDeleteResp)
	err := c.cc.Invoke(ctx, Sys_OperationLogDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysServer is the server API for Sys service.
// All implementations must embed UnimplementedSysServer
// for forward compatibility
type SysServer interface {
	// UserLogin 用户登录
	UserLogin(context.Context, *LoginReq) (*LoginResp, error)
	// SaveOrUpdateRole 添加｜｜更新角色
	SaveOrUpdateRole(context.Context, *SaveOrUpdateRoleReq) (*SaveOrUpdateRoleResp, error)
	// RoleDelete 删除角色
	RoleDelete(context.Context, *RoleDeleteReq) (*RoleDeleteResp, error)
	// RoleList 角色列表
	RoleList(context.Context, *RoleListReq) (*RoleListResp, error)
	// SaveOrUpdateMenu 添加｜｜更新菜单
	SaveOrUpdateMenu(context.Context, *SaveOrUpdateMenuReq) (*SaveOrUpdateMenuResp, error)
	// MenuList 菜单列表
	MenuList(context.Context, *MenuListReq) (*MenuListResp, error)
	// MenuDelete 删除菜单
	MenuDelete(context.Context, *MenuDeleteReq) (*MenuDeleteResp, error)
	// LoginLogList 登录日志列表
	LoginLogList(context.Context, *LoginLogListReq) (*LoginLogListResp, error)
	// LoginLogDelete 删除登录日志
	LoginLogDelete(context.Context, *LoginLogDeleteReq) (*LoginLogDeleteResp, error)
	// 添加日志
	OperationLogAdd(context.Context, *OperationLogAddReq) (*OperationLogAddResp, error)
	// 日志列表
	OperationLogList(context.Context, *OperationLogListReq) (*OperationLogListResp, error)
	// 删除日志
	OperationLogDelete(context.Context, *OperationLogDeleteReq) (*OperationLogDeleteResp, error)
	mustEmbedUnimplementedSysServer()
}

// UnimplementedSysServer must be embedded to have forward compatible implementations.
type UnimplementedSysServer struct {
}

func (UnimplementedSysServer) UserLogin(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedSysServer) SaveOrUpdateRole(context.Context, *SaveOrUpdateRoleReq) (*SaveOrUpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOrUpdateRole not implemented")
}
func (UnimplementedSysServer) RoleDelete(context.Context, *RoleDeleteReq) (*RoleDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleDelete not implemented")
}
func (UnimplementedSysServer) RoleList(context.Context, *RoleListReq) (*RoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleList not implemented")
}
func (UnimplementedSysServer) SaveOrUpdateMenu(context.Context, *SaveOrUpdateMenuReq) (*SaveOrUpdateMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOrUpdateMenu not implemented")
}
func (UnimplementedSysServer) MenuList(context.Context, *MenuListReq) (*MenuListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuList not implemented")
}
func (UnimplementedSysServer) MenuDelete(context.Context, *MenuDeleteReq) (*MenuDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MenuDelete not implemented")
}
func (UnimplementedSysServer) LoginLogList(context.Context, *LoginLogListReq) (*LoginLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginLogList not implemented")
}
func (UnimplementedSysServer) LoginLogDelete(context.Context, *LoginLogDeleteReq) (*LoginLogDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginLogDelete not implemented")
}
func (UnimplementedSysServer) OperationLogAdd(context.Context, *OperationLogAddReq) (*OperationLogAddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperationLogAdd not implemented")
}
func (UnimplementedSysServer) OperationLogList(context.Context, *OperationLogListReq) (*OperationLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperationLogList not implemented")
}
func (UnimplementedSysServer) OperationLogDelete(context.Context, *OperationLogDeleteReq) (*OperationLogDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperationLogDelete not implemented")
}
func (UnimplementedSysServer) mustEmbedUnimplementedSysServer() {}

// UnsafeSysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysServer will
// result in compilation errors.
type UnsafeSysServer interface {
	mustEmbedUnimplementedSysServer()
}

func RegisterSysServer(s grpc.ServiceRegistrar, srv SysServer) {
	s.RegisterService(&Sys_ServiceDesc, srv)
}

func _Sys_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UserLogin(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SaveOrUpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveOrUpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SaveOrUpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SaveOrUpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SaveOrUpdateRole(ctx, req.(*SaveOrUpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_RoleDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleDelete(ctx, req.(*RoleDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_RoleList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).RoleList(ctx, req.(*RoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_SaveOrUpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveOrUpdateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).SaveOrUpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_SaveOrUpdateMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).SaveOrUpdateMenu(ctx, req.(*SaveOrUpdateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_MenuList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuList(ctx, req.(*MenuListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_MenuDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).MenuDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_MenuDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).MenuDelete(ctx, req.(*MenuDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_LoginLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).LoginLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_LoginLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).LoginLogList(ctx, req.(*LoginLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_LoginLogDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLogDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).LoginLogDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_LoginLogDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).LoginLogDelete(ctx, req.(*LoginLogDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_OperationLogAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationLogAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).OperationLogAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_OperationLogAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).OperationLogAdd(ctx, req.(*OperationLogAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_OperationLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).OperationLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_OperationLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).OperationLogList(ctx, req.(*OperationLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_OperationLogDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationLogDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).OperationLogDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sys_OperationLogDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).OperationLogDelete(ctx, req.(*OperationLogDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sys_ServiceDesc is the grpc.ServiceDesc for Sys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.Sys",
	HandlerType: (*SysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserLogin",
			Handler:    _Sys_UserLogin_Handler,
		},
		{
			MethodName: "SaveOrUpdateRole",
			Handler:    _Sys_SaveOrUpdateRole_Handler,
		},
		{
			MethodName: "RoleDelete",
			Handler:    _Sys_RoleDelete_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _Sys_RoleList_Handler,
		},
		{
			MethodName: "SaveOrUpdateMenu",
			Handler:    _Sys_SaveOrUpdateMenu_Handler,
		},
		{
			MethodName: "MenuList",
			Handler:    _Sys_MenuList_Handler,
		},
		{
			MethodName: "MenuDelete",
			Handler:    _Sys_MenuDelete_Handler,
		},
		{
			MethodName: "LoginLogList",
			Handler:    _Sys_LoginLogList_Handler,
		},
		{
			MethodName: "LoginLogDelete",
			Handler:    _Sys_LoginLogDelete_Handler,
		},
		{
			MethodName: "OperationLogAdd",
			Handler:    _Sys_OperationLogAdd_Handler,
		},
		{
			MethodName: "OperationLogList",
			Handler:    _Sys_OperationLogList_Handler,
		},
		{
			MethodName: "OperationLogDelete",
			Handler:    _Sys_OperationLogDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sys.proto",
}
